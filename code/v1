openapi: "3.0.1"
info:
  title: "Legalesign API"
  description: "Legalesign.com is an electronic signature software. This is the documentation\
    \ for its REST API. \n\nStart by creating a trial account at https://app1.legalesign.com/auth/intro/.\
    \ Upon account activation, select the API development option and get an API key.\
    \ You will be in sandbox mode that will limit you to 5 signers. Add them on https://app1.legalesign.com/acc/settings/#api\
    \  .\n\nFor any queries contact us at support@legalesign.com.\n"
  termsOfService: "https://legalesign.com/opn/terms/"
  contact:
    email: "support@legalesign.com"
  version: "1.0.0"
externalDocs:
  description: "Find out more about Legalesign"
  url: "https://legalesign.com/"
servers:
- url: "https://dhhzfal63e.execute-api.eu-west-2.amazonaws.com/{basePath}"
  variables:
    basePath:
      default: "/dev"
tags:
- name: "attachment"
  description: "Static email attachments"
- name: "document"
  description: "Sent documents"
- name: "signer"
  description: "Document signers"
- name: "template"
  description: "HTML-based text templates"
  externalDocs:
    description: "Information about html/text templates"
    url: "https://legalesign.com/articles/esignature-api/using-htmltext-in-the-api/"
- name: "pdf"
  description: "PDF-based templates"
- name: "group"
  description: "groups (aka teams) relevant to the user"
- name: "member"
  description: "a member is a user assigned to a group"
- name: "user"
  description: "a user provides login access"
- name: "callback"
  description: "event notifications"
  externalDocs:
    description: "Information about callbacks"
    url: "https://legalesign.com/articles/esignature-api/callbacks-on-the-api-v1/"
paths:
  /document/preview:
    post:
      tags:
      - "document"
      summary: "See preview of signing page for HTML document"
      description: "Returns a redirect response (302) with link in the Location header\
        \ to a one-use temporary URL you can redirect to, to see a preview of the\
        \ signing page. Follow the redirect immediately since it expires after a few\
        \ seconds."
      requestBody:
        description: "Preview signing page for HTML document"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MODEL9095c2"
        required: true
      responses:
        302:
          description: "short-lived link (a few seconds) to signing page preview returned\
            \ in Location header"
          headers:
            location:
              description: "contains link to preview page"
              schema:
                type: "string"
          content: {}
  /user/{userId}:
    get:
      tags:
      - "user"
      summary: "get a users details"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "operation successful"
          content: {}
    patch:
      tags:
      - "user"
      summary: "update the user first name or last name"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MODEL9e1302"
        required: true
      responses:
        202:
          description: "operation successful"
          content: {}
  /templates/{templateId}:
    get:
      tags:
      - "template"
      summary: "A single template, includes latest text"
      externalDocs:
        description: "Read-me about text templates"
        url: "https://legalesign.com/articles/esignature-api/using-htmltext-in-the-api/"
      responses:
        200:
          description: "operation successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateResponse1"
    delete:
      tags:
      - "template"
      summary: "deletes a template (is recoverable, i.e. not fully deleted, if you\
        \ need true data deletion contact us)."
      responses:
        204:
          description: "operation successful"
          content: {}
    patch:
      tags:
      - "template"
      summary: "update template fields"
      requestBody:
        description: "Updated text template object"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MODELbdff9d"
        required: true
      responses:
        202:
          description: "operation successful"
          content: {}
  /invited:
    get:
      tags:
      - "member"
      summary: "list all emails invited to join groups"
      parameters:
      - name: "group"
        in: "query"
        description: "filter list by a given group"
        schema:
          type: "string"
      responses:
        200:
          description: "operation successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvitedListResponse"
  /attachment/{attachmentId}:
    get:
      tags:
      - "attachment"
      summary: "Get attachment details"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttachmentResponseDetail"
      security:
      - api_key: []
    delete:
      tags:
      - "attachment"
      summary: "Delete attachment"
      responses:
        204:
          description: "successful operation"
          content: {}
      security:
      - api_key: []
  /member:
    get:
      tags:
      - "member"
      summary: "get group members"
      parameters:
      - name: "group"
        in: "query"
        description: "filter list by a given group"
        schema:
          type: "string"
      - name: "offset"
        in: "query"
        description: "Offset from start of dataset. Use with the limit query to iterate\
          \ through dataset."
        schema:
          type: "string"
      - name: "limit"
        in: "query"
        description: "Length of dataset to return. Use with offset query to iterate\
          \ through results."
        schema:
          type: "string"
      responses:
        200:
          description: "operation successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemberListResponse"
    post:
      tags:
      - "member"
      summary: "add new member to a group"
      description: "if person is a user of legalesign access will be immediate if\
        \ not he/she will be invited and join the group upon activating an account"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MODEL229d23"
        required: true
      responses:
        400:
          description: "operation not successful, e.g. person is already a member"
          content: {}
        201:
          description: "operation successful"
          content: {}
  /subscribe:
    post:
      tags:
      - "callback"
      summary: "create an event notification"
      externalDocs:
        description: "Information about callbacks"
        url: "https://legalesign.com/articles/esignature-api/callbacks-on-the-api-v1/"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CallbackCreatePost"
        required: true
      responses:
        400:
          description: "bad request"
          content: {}
        201:
          description: "operation successful"
          content: {}
  /signer/{signerId}/fields1:
    get:
      tags:
      - "signer"
      summary: "Return list of signer form fields"
      parameters:
      - name: "signerId"
        in: "path"
        description: "ID of signer"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "operation successful"
          content: {}
  /signer/{signerId}:
    get:
      tags:
      - "signer"
      summary: "Get status and details of an individual signer"
      parameters:
      - name: "signerId"
        in: "path"
        description: "ID of signer"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "operation successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignerResponse"
  /signer/{signerId}/reset:
    post:
      tags:
      - "signer"
      summary: "Reset to an earlier signer if forwarded"
      parameters:
      - name: "signerId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        description: "Email of the earlier signer, notify current signer by email\
          \ of event"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MODELfa2e34"
        required: true
      responses:
        400:
          description: "error - document either signed, or email is same as existing,\
            \ or if previous email not found. Read response body for error information."
          content: {}
        200:
          description: "Ok"
          content: {}
  /notifications:
    get:
      tags:
      - "callback"
      summary: "a list of your event notifications"
      externalDocs:
        description: "Information about callbacks"
        url: "https://legalesign.com/articles/esignature-api/callbacks-on-the-api-v1/"
      responses:
        200:
          description: "operation successful"
          content: {}
  /templatepdf/{pdfId}/fields:
    get:
      tags:
      - "pdf"
      summary: "return list of fields in the document"
      responses:
        200:
          description: "list of pdf-based templates"
          content: {}
    post:
      tags:
      - "pdf"
      summary: "replace pdf fields"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArrayOfPDFFieldsPost"
        required: true
      responses:
        201:
          description: "operation successful"
          content: {}
  /status/{docId}:
    get:
      tags:
      - "document"
      summary: "Returns fast short version of key doc info"
      parameters:
      - name: "docId"
        in: "path"
        description: "ID of document"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "operation successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusResponse"
  /signer/{signerId}/send-reminder:
    post:
      tags:
      - "signer"
      summary: "Send a reminder email to signer"
      parameters:
      - name: "signerId"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        description: "Message text"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MODEL79e682"
        required: true
      responses:
        200:
          description: "operation successful"
          content: {}
  /pdf/preview:
    post:
      tags:
      - "document"
      summary: "HTML only. Return raw pdf preview."
      requestBody:
        description: "Data to generate pdf"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocumentPdfPreview"
        required: true
      responses:
        200:
          description: "Returns raw pdf"
          content: {}
  /template:
    get:
      tags:
      - "template"
      summary: "Return list of text templates, does not include text of each"
      externalDocs:
        description: "Read me about text templates"
        url: "https://legalesign.com/articles/esignature-api/using-htmltext-in-the-api/"
      parameters:
      - name: "group"
        in: "query"
        description: "can be full resource_uri or only id"
        schema:
          type: "string"
      - name: "limit"
        in: "query"
        description: "Length of dataset to return. Use with offset query to iterate\
          \ through results."
        schema:
          type: "string"
      - name: "archive"
        in: "query"
        schema:
          type: "string"
      - name: "offset"
        in: "query"
        description: "Offset from start of dataset. Use with the limit query to iterate\
          \ through dataset."
        schema:
          type: "string"
      responses:
        200:
          description: "list of text templates"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateListResponse"
    post:
      tags:
      - "template"
      summary: "Create a new html/text template. This is available, but why use it\
        \ when you can send your HTML through at the same time you send your document...\
        \ and that's probably why you are using HTML in the first place."
      responses:
        201:
          description: "operation successful"
          headers:
            location:
              description: "resource_uri for new template"
              schema:
                type: "string"
          content: {}
  /unsubscribe:
    post:
      tags:
      - "callback"
      summary: "remove an event notification"
      externalDocs:
        description: "Information about callbacks"
        url: "https://legalesign.com/articles/esignature-api/callbacks-on-the-api-v1/"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CallbackDeletePost"
        required: true
      responses:
        400:
          description: "bad request - not json data or not a valid url"
          content: {}
        200:
          description: "operation successful, will return 200 whether url is actually\
            \ subscribed or not"
          content: {}
  /group:
    get:
      tags:
      - "group"
      summary: "list of groups to which the api user belongs"
      parameters:
      - name: "offset"
        in: "query"
        description: "Offset from start of dataset. Use with the limit query to iterate\
          \ through dataset."
        schema:
          type: "string"
      - name: "limit"
        in: "query"
        description: "Length of dataset to return. Use with offset query to iterate\
          \ through results."
        schema:
          type: "string"
      responses:
        200:
          description: "operation successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupListResponse"
    post:
      tags:
      - "group"
      summary: "Create new group"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MODELfe94b6"
        required: true
      responses:
        400:
          description: "groups allowance exceeded"
          content: {}
        201:
          description: "operation successful"
          headers:
            location:
              description: "resource_uri for new group"
              schema:
                type: "string"
          content: {}
  /attachment:
    get:
      tags:
      - "attachment"
      summary: "Get attachments"
      description: "List attachments in your groups"
      operationId: "getAttachments"
      parameters:
      - name: "group"
        in: "query"
        description: "Filter by a specific group"
        schema:
          type: "string"
      responses:
        400:
          description: "Invalid status value"
          content: {}
        200:
          description: "successful operation, list of attachment objects"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttachmentListResponse"
    post:
      tags:
      - "attachment"
      summary: "List or upload PDFs that will be static email attachments"
      operationId: "addAttachment"
      requestBody:
        description: "Upload a pdf file to be an email attachment"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttachmentPost"
        required: true
      responses:
        201:
          description: "Success. Attachment URI will be in Location header."
          content: {}
        429:
          description: "Throttled"
          content: {}
        400:
          description: "Bad Request, read response for error information"
          content: {}
        401:
          description: "Unauthorized"
          content: {}
        500:
          description: "Usually unparseable JSON"
          content: {}
  /document:
    get:
      tags:
      - "document"
      summary: "Get sent document listings"
      description: "List (unarchived) documents you have sent to be signed"
      operationId: "getDocuments"
      parameters:
      - name: "email"
        in: "query"
        description: "Filter by signer email"
        schema:
          type: "string"
      - name: "limit"
        in: "query"
        description: "Length of dataset to return. Use with offset query to iterate\
          \ through results."
        schema:
          type: "string"
      - name: "offset"
        in: "query"
        description: "Offset from start of dataset. Use with the limit query to iterate\
          \ through dataset."
        schema:
          type: "string"
      - name: "cache"
        in: "query"
        description: "For large datasets use this and be sure to use the same limit\
          \ value when iterating with increasing offset values."
        schema:
          type: "string"
      - name: "groupresourceuri"
        in: "query"
        description: "Filter by a specific group"
        schema:
          type: "string"
      - name: "status"
        in: "query"
        description: "Filter on document status"
        schema:
          type: "string"
      - name: "archived"
        in: "query"
        description: "Filter on archived status, default is false"
        schema:
          type: "string"
      - name: "nosigners"
        in: "query"
        description: "Add value '1' to remove signers information for a faster query"
        schema:
          type: "string"
      responses:
        400:
          description: "Invalid status value"
          content: {}
        200:
          description: "successful operation, list of document objects"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentListResponse"
    post:
      tags:
      - "document"
      summary: "Send a document to be signed"
      operationId: "addDocument"
      requestBody:
        description: "Send a document to be signed"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocumentPost"
        required: true
      responses:
        201:
          description: "Success. Document URI will be in Location header. If return_signer_links\
            \ was set to true, the body will contain a JSON dict containing the signing\
            \ links."
          headers:
            location:
              description: "new document resource uri"
              schema:
                type: "string"
          content: {}
        429:
          description: "Throttled"
          content: {}
        400:
          description: "Bad Request, read response for error information"
          content: {}
        401:
          description: "Unauthorized"
          content: {}
        500:
          description: "Usually unparseable JSON, or mis-referenced object"
          content: {}
  /templatepdf/{pdfId}/tags:
    post:
      tags:
      - "pdf"
      summary: "Convert text tags in the pdf into fields"
      externalDocs:
        description: "text tags in pdfs"
        url: "https://legalesign.com/articles/pdf-documents/text-tags-on-legalesign/"
      parameters:
      - name: "pdfId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        400:
          description: "bad request"
          content: {}
        201:
          description: "operation successful"
          content: {}
  /document/{docId}:
    get:
      tags:
      - "document"
      summary: "Get document details"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentResponseDetail"
      security:
      - api_key: []
    delete:
      tags:
      - "document"
      summary: "Mark document as removed and archive"
      description: "Delete does not remove permanently but sets it with status 40\
        \ (removed)  and archives it."
      responses:
        204:
          description: "successful operation"
          content: {}
  /invited/{invitedId}:
    delete:
      tags:
      - "member"
      summary: "remove person from invited list"
      parameters:
      - name: "invitedId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        204:
          description: "operation successful"
          content: {}
  /templatepdf:
    get:
      tags:
      - "pdf"
      summary: "return pdf templates listings"
      parameters:
      - name: "group"
        in: "query"
        description: "can be full resource_uri or only id"
        schema:
          type: "string"
      - name: "limit"
        in: "query"
        description: "Length of dataset to return. Use with offset query to iterate\
          \ through results."
        schema:
          type: "string"
      - name: "archive"
        in: "query"
        schema:
          type: "string"
      - name: "offset"
        in: "query"
        description: "Offset from start of dataset. Use with the limit query to iterate\
          \ through dataset."
        schema:
          type: "string"
      responses:
        200:
          description: "operation successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PDFListResponse"
    post:
      tags:
      - "pdf"
      summary: "Upload a new PDF template"
      requestBody:
        description: "Data for PDF upload"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PDFPost"
        required: true
      responses:
        201:
          description: "operation successful"
          headers:
            location:
              description: "resource_uri for new pdf template"
              schema:
                type: "string"
          content: {}
  /templatepdf/{pdfId}:
    get:
      tags:
      - "pdf"
      responses:
        200:
          description: "list of pdf-based templates"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PDFResponse"
  /group/{groupId}:
    get:
      tags:
      - "group"
      summary: "get a group information"
      parameters:
      - name: "groupId"
        in: "path"
        description: ""
        required: true
        schema:
          type: "string"
    patch:
      tags:
      - "group"
      summary: "update a group information"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MODELc4b5eb"
        required: true
      responses:
        202:
          description: "operation successful"
          content: {}
        400:
          description: "bad request"
          content: {}
  /status:
    get:
      tags:
      - "document"
      summary: "Shortened fast query for document status"
      parameters:
      - name: "filter"
        in: "query"
        description: "Filter on archived status, default is false"
        schema:
          type: "string"
      - name: "offset"
        in: "query"
        description: "Offset from start of dataset. Use with the limit query to iterate\
          \ through dataset."
        schema:
          type: "string"
      - name: "limit"
        in: "query"
        description: "Length of dataset to return. Use with offset query to iterate\
          \ through results."
        schema:
          type: "string"
      responses:
        200:
          description: "operation successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusListResponse"
  /user:
    post:
      tags:
      - "user"
      summary: "add a new user to a group"
      externalDocs:
        description: "Read more about selecting the right permission"
        url: "https://legalesign.com/articles/users-and-user-permissions/user-permissions-explained/"
      requestBody:
        description: "Create a new user who can gain access to your groups. You should\
          \ specify the groups the user should be able to access. Only the groups\
          \ the API user can access are valid. If you do not set a password then a\
          \ verification link will be emailed to the user. This will allow the user\
          \ to set their password and activate their account. In this case you can\
          \ also add a redirect_to url to redirect the user back to your website after\
          \ they have activated their account. N.B. Make sure you add the user to\
          \ at least one of your groups, otherwise you will not have API access to\
          \ the user information.\n"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPost"
        required: true
      responses:
        400:
          description: "bad request"
          content: {}
        201:
          description: "operation succesful"
          headers:
            location:
              description: "resource_uri for new user (if password set)"
              schema:
                type: "string"
          content: {}
  /signer/{signerId}/new-link:
    get:
      tags:
      - "signer"
      summary: "Get access link for a signer"
      description: "Returns 1-use link for signer in Location header. "
      parameters:
      - name: "signerId"
        in: "path"
        description: "ID of signer"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "operation sucessful"
          headers:
            location:
              description: "Contains new link"
              schema:
                type: "string"
          content: {}
  /member/{memberId}:
    get:
      tags:
      - "member"
      summary: "return detail about a member of a group"
      responses:
        200:
          description: "operation successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemberResponse"
    delete:
      tags:
      - "member"
      summary: "remove member from group"
      responses:
        204:
          description: "operation successful"
          content: {}
  /pdf/{docId}:
    get:
      tags:
      - "document"
      summary: "Returns 302 to download either draft or final PDF."
      parameters:
      - name: "docId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "operation successful"
          content: {}
components:
  schemas:
    MemberResponse:
      type: "object"
      properties:
        created:
          type: "string"
          format: "date-time"
        group:
          type: "string"
        modified:
          type: "string"
          format: "date-time"
        permission:
          type: "integer"
        resource_uri:
          type: "string"
        user:
          type: "string"
    DocumentPost:
      required:
      - "group"
      - "name"
      - "signers"
      type: "object"
      properties:
        group:
          type: "string"
        name:
          maxLength: 60
          type: "string"
        text:
          type: "string"
          description: "Raw html. Data must contain either one of the attributes text,\
            \ templatepdf, template."
        templatepdf:
          type: "string"
          description: "Resource URI of templatepdf object. Data must contain either\
            \ one of the attributes text, templatepdf, template."
        template:
          type: "string"
          description: "Resource URI of text template object. Data must contain either\
            \ one of the attributes text, templatepdf, template."
        signers:
          type: "array"
          items:
            $ref: "#/components/schemas/DocumentSignerPost"
        append_pdf:
          type: "boolean"
          description: "Append Legalesign validation info to final PDF. If not included\
            \ uses the group default."
          default: false
        auto_archive:
          type: "boolean"
          description: "Send to archive soon after signing. Keeps web app clutter\
            \ free"
          default: true
        do_email:
          type: "boolean"
          description: "Use Legalesign email to send notification emails"
          default: false
        cc_emails:
          type: "string"
          description: "Comma delimited list of email addresses that are notified\
            \ of signing or rejection."
        footer:
          type: "string"
          description: "Text doc only. The footer for the final pdf. Use keyword \\\
            \"default\\\" to use group default footer."
        footer_height:
          type: "integer"
          description: "Text based doc only. Pixel height of PDF footer, if used.\
            \ 1px = 0.025cm"
          format: "int64"
        header:
          type: "string"
          description: "Text based doc only. The header for the final pdf. Use keyword\
            \ \\\"default\\\" to use group header footer."
        header_height:
          type: "integer"
          description: "Text based doc only. Pixel height of final PDF footer, if\
            \ used. 1px = 0.025cm"
          format: "int64"
        pdftext:
          type: "object"
          properties: {}
          description: "Assign values to PDF sender fields, use field labels as keys.\
            \ Requires unique fields labels. See also strict_fields."
        return_signer_links:
          type: "boolean"
          description: "Return document links for signers in the response BODY."
        signers_in_order:
          type: "boolean"
          description: "Notify signers in their order sequence. If false all are notified\
            \ simulataneously/"
        user:
          type: "string"
          description: "Assign document another user in the group. Defaults to API"
        pdf_password:
          type: "string"
          description: "if the group is not set to use a password you must use use\
            \ pdf_password_type"
        pdf_password_type:
          type: "integer"
          description: "1 for us to save password, 2 for us to delete from our records\
            \ upon final signing."
      description: "Send a document to be signed. In addition to the required fields,\
        \ the POST must also contain either text (raw html) or a reference to a saved\
        \ template (html) or a templatepdf (uploaded pdf). Also recommended to review\
        \ - do_email, auto_archive and pdftext (if using pdf)."
    MODELbdff9d:
      type: "string"
      description: "any fields to update"
    TemplateListResponse:
      allOf:
      - $ref: "#/components/schemas/ListResponseAbstract"
      - type: "object"
    ArrayOfPDFFieldsPost:
      type: "array"
      items:
        $ref: "#/components/schemas/PDFFieldsPost"
    PDFFieldsPost:
      required:
      - "ax"
      - "ay"
      - "bx"
      - "by"
      - "element_type"
      - "fieldorder"
      - "label"
      - "page"
      - "signer"
      type: "object"
      properties:
        ax:
          type: "number"
          description: "left vertical, 0 = left page edge, 1 = right page edge"
          format: "float"
        ay:
          type: "number"
          description: "upper horizontal, 0 = top page edge, 1 = bottom page edge"
          format: "float"
        bx:
          type: "number"
          description: "right vertical, 0 = left page edge, 1 = right page edge"
          format: "float"
        by:
          type: "number"
          description: "lower horizontal. 0 = top page edge, 1 = bottom page edge"
          format: "float"
        element_type:
          type: "string"
          description: "Must be one of the following, * Signature - signature field\
            \ * Initials - initials field * Text - signer field (field for signer\
            \ to complete) * Admin - sender field (field to complete by admin user\
            \ when sending)"
          enum:
          - "signature"
          - "initials"
          - "text"
          - "admin"
        fieldorder:
          type: "integer"
          description: "ordering of fields as signer progresses"
          format: "int32"
        label:
          type: "string"
          description: "help signer/sender understand what to do"
        label_extra:
          type: "string"
          description: "more label if required"
        options:
          type: "string"
          description: "user for certain validation types"
        page:
          type: "integer"
          description: "which page to place field on"
          format: "int36"
        signer:
          minimum: 1.0
          type: "integer"
          description: "1-indexed number for signer"
          format: "int36"
        align:
          type: "integer"
          description: "one of the following * 1 - left * 2 - middle * 3 - right"
        font_size:
          maximum: 20.0
          minimum: 6.0
          type: "number"
          format: "float"
        hide_border:
          type: "boolean"
        optional:
          type: "boolean"
          description: "set true to allow field to be ignored"
          default: false
        substantive:
          type: "boolean"
          description: "set if field substantive to contract terms, if so will not\
            \ let other sign till this field completed"
          default: false
        validation:
          $ref: "#/components/schemas/PDFFieldValidationEnum"
        value:
          type: "string"
    SignerResponse:
      type: "object"
      properties:
        document:
          type: "string"
        email:
          type: "string"
        first_name:
          type: "string"
        last_namme:
          type: "string"
        has_fields:
          type: "boolean"
        order:
          type: "integer"
          format: "int36"
        resource_uri:
          type: "string"
        status:
          $ref: "#/components/schemas/SignerStatusEnum"
    DocumentListResponse:
      allOf:
      - $ref: "#/components/schemas/ListResponseAbstract"
      - type: "object"
    MODEL9095c2:
      type: "object"
      properties:
        text:
          type: "string"
        title:
          type: "string"
        group:
          type: "string"
        signee_count:
          type: "integer"
          format: "int36"
    DocumentPdfPreview:
      required:
      - "group"
      - "is_signature_per_page"
      - "signature_type"
      - "signee_count"
      - "text"
      type: "object"
      properties:
        text:
          type: "string"
          description: "raw html"
        signee_count:
          type: "integer"
          description: "number of signers"
          format: "int36"
        signature_type:
          type: "integer"
        is_signature_per_page:
          type: "integer"
        group:
          type: "string"
        title:
          type: "string"
        header:
          type: "string"
        footer:
          type: "string"
        header_height:
          type: "integer"
          format: "int64"
        footer_height:
          type: "integer"
        pdfheader:
          type: "boolean"
          description: "Set to true to use group default"
          format: "int64"
    CallbackDeletePost:
      required:
      - "url"
      type: "object"
      properties:
        url:
          type: "string"
          description: "url to remove, must match any registered callback exactly"
    AttachmentResponseDetail:
      allOf:
      - $ref: "#/components/schemas/AttachmentResponse"
      - type: "object"
    MODEL79e682:
      type: "object"
      properties:
        text:
          type: "string"
          description: "message text here, html will be stripped"
    MODEL229d23:
      required:
      - "email"
      - "group"
      type: "object"
      properties:
        group:
          type: "string"
        email:
          type: "string"
        do_email:
          type: "boolean"
          description: "use legalesign to send email notification to new user"
          default: false
    MODELc4b5eb:
      type: "object"
      properties:
        public_name:
          type: "string"
    MODELfe94b6:
      required:
      - "name"
      type: "object"
      properties:
        name:
          type: "string"
    DocumentResponse:
      type: "object"
      properties:
        archived:
          type: "boolean"
        auto_archive:
          type: "boolean"
          description: "Send document archive very soon after signing."
          default: true
        cc_emails:
          type: "string"
          description: "who will be cc'd  with sender on email notification when signed"
        created:
          type: "string"
          format: "date-time"
        download_final:
          type: "boolean"
          description: "Final PDF is available to download"
        group:
          type: "string"
          description: "Resource URI of group"
        modified:
          type: "string"
          format: "date-time"
        name:
          type: "string"
        pdftext:
          type: "string"
          description: "ignore this"
        resource_uri:
          type: "string"
        return_signer_links:
          type: "boolean"
          description: "ignore"
        signers:
          $ref: "#/components/schemas/DocumentSignerResponse"
        status:
          $ref: "#/components/schemas/DocumentStatusEnum"
        template:
          type: "string"
        templatepdf:
          type: "string"
        user:
          type: "string"
          description: "Resource URI of user"
        uuid:
          type: "string"
          description: "Object ID alone not in URI format"
    DocumentSignerResponse:
      type: "array"
      description: "will be ordered list of 8 signer values as follows - str signer\
        \ resource_uri, str first name, str last name, str email, str behalf of, \
        \ bool fields complete, int signer status, int signer order (zero-indexed).\
        \ For status see SignerStatusEnum."
      items:
        type: "string"
    AttachmentResponse:
      type: "object"
      properties:
        created:
          type: "string"
          format: "date-time"
        description:
          type: "string"
        group:
          type: "string"
        resource_uri:
          type: "string"
        filename:
          type: "string"
        user:
          type: "string"
          description: "resource_uri for user"
        uuid:
          type: "string"
          description: "id for pdf object"
    TemplateResponse1:
      allOf:
      - $ref: "#/components/schemas/TemplateResponse"
      - type: "object"
    TemplateResponse:
      type: "object"
      properties:
        archive:
          type: "boolean"
        created:
          type: "string"
          format: "date-time"
        group:
          type: "string"
        has_fields:
          type: "boolean"
        modified:
          type: "string"
          format: "date-time"
        resoure_uri:
          type: "string"
        signee_count:
          type: "integer"
          format: "int36"
        title:
          type: "string"
        uuid:
          type: "string"
    PDFListResponse:
      allOf:
      - $ref: "#/components/schemas/ListResponseAbstract"
      - type: "object"
    UserPost:
      required:
      - "email"
      - "first_name"
      - "last_name"
      - "timezone"
      type: "object"
      properties:
        first_name:
          maxLength: 30
          type: "string"
        last_name:
          maxLength: 30
          type: "string"
        email:
          type: "string"
        timezone:
          $ref: "#/components/schemas/TimezoneEnum"
        password:
          minLength: 6
          pattern: "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{6,}$"
          type: "string"
          description: "if not set a verification email is sent. at least 6 chars\
            \ with a digit"
        redirect_to:
          type: "string"
          description: "if verification link is emailed (password is not set) then\
            \ person is redirected to legalesign"
        groups:
          type: "string"
          description: "comma delimited list of groups to add user to, can be full\
            \ group resource_uri or groupId"
        permission:
          type: "string"
          description: "set user permissions * 1 - admin * 2 - create and send docs,\
            \ team user * 3 - readonly, team user * 4 - send only, team user * 5 -\
            \ send only, individual user * 6 - create and send docs, invidual user"
          enum:
          - "1"
          - "2"
          - "3"
          - "4"
          - "5"
          - "6"
      description: "Create a new user who can gain access to your groups. You should\
        \ specify the groups the user should be able to access. Only the groups the\
        \ API user can access are valid. If you do not set a password then a verification\
        \ link will be emailed to the user. This will allow the user to set their\
        \ password and activate their account. In this case you can also add a redirect_to\
        \ url to redirect the user back to your website after they have activated\
        \ their account. N.B. Make sure you add the user to at least one of your groups,\
        \ otherwise you will not have API access to the user information.\n"
    DocumentSignerPost:
      required:
      - "email"
      - "firstname"
      - "lastname"
      - "order"
      type: "object"
      properties:
        order:
          type: "integer"
          description: "zero-indexed signer ordering"
          format: "int32"
        email:
          maxLength: 75
          type: "string"
        firstname:
          maxLength: 60
          pattern: "^[^\\,;:<>=]+$"
          type: "string"
        lastname:
          maxLength: 60
          pattern: "^[^\\,;:<>=]+$"
          type: "string"
        behalfof:
          maxLength: 120
          type: "string"
        message:
          type: "string"
          description: "use keyword \\\"default\\\" to use group message"
        subject:
          maxLength: 150
          type: "string"
        expires:
          type: "string"
          description: "ISO8601 formed datetime"
        attachments:
          type: "array"
          description: "list of attachment resource uris"
          items:
            type: "string"
    TimezoneEnum:
      type: "string"
      description: "List of available timezones"
      enum:
      - "Africa/Abidjan"
      - "Africa/Accra"
      - "Africa/Addis_Ababa"
      - "Africa/Algiers"
      - "Africa/Asmara"
      - "Africa/Bamako"
      - "Africa/Bangui"
      - "Africa/Banjul"
      - "Africa/Bissau"
      - "Africa/Blantyre"
      - "Africa/Brazzaville"
      - "Africa/Bujumbura"
      - "Africa/Cairo"
      - "Africa/Casablanca"
      - "Africa/Ceuta"
      - "Africa/Conakry"
      - "Africa/Dakar"
      - "Africa/Dar_es_Salaam"
      - "Africa/Djibouti"
      - "Africa/Douala"
      - "Africa/El_Aaiun"
      - "Africa/Freetown"
      - "Africa/Gaborone"
      - "Africa/Harare"
      - "Africa/Johannesburg"
      - "Africa/Juba"
      - "Africa/Kampala"
      - "Africa/Khartoum"
      - "Africa/Kigali"
      - "Africa/Kinshasa"
      - "Africa/Lagos"
      - "Africa/Libreville"
      - "Africa/Lome"
      - "Africa/Luanda"
      - "Africa/Lubumbashi"
      - "Africa/Lusaka"
      - "Africa/Malabo"
      - "Africa/Maputo"
      - "Africa/Maseru"
      - "Africa/Mbabane"
      - "Africa/Mogadishu"
      - "Africa/Monrovia"
      - "Africa/Nairobi"
      - "Africa/Ndjamena"
      - "Africa/Niamey"
      - "Africa/Nouakchott"
      - "Africa/Ouagadougou"
      - "Africa/Porto-Novo"
      - "Africa/Sao_Tome"
      - "Africa/Tripoli"
      - "Africa/Tunis"
      - "Africa/Windhoek"
      - "America/Adak"
      - "America/Anchorage"
      - "America/Anguilla"
      - "America/Antigua"
      - "America/Araguaina"
      - "America/Argentina/Buenos_Aires"
      - "America/Argentina/Catamarca"
      - "America/Argentina/Cordoba"
      - "America/Argentina/Jujuy"
      - "America/Argentina/La_Rioja"
      - "America/Argentina/Mendoza"
      - "America/Argentina/Rio_Gallegos"
      - "America/Argentina/Salta"
      - "America/Argentina/San_Juan"
      - "America/Argentina/San_Luis"
      - "America/Argentina/Tucuman"
      - "America/Argentina/Ushuaia"
      - "America/Aruba"
      - "America/Asuncion"
      - "America/Atikokan"
      - "America/Bahia"
      - "America/Bahia_Banderas"
      - "America/Barbados"
      - "America/Belem"
      - "America/Belize"
      - "America/Blanc-Sablon"
      - "America/Boa_Vista"
      - "America/Bogota"
      - "America/Boise"
      - "America/Cambridge_Bay"
      - "America/Campo_Grande"
      - "America/Cancun"
      - "America/Caracas"
      - "America/Cayenne"
      - "America/Cayman"
      - "America/Chicago"
      - "America/Chihuahua"
      - "America/Costa_Rica"
      - "America/Creston"
      - "America/Cuiaba"
      - "America/Curacao"
      - "America/Danmarkshavn"
      - "America/Dawson"
      - "America/Dawson_Creek"
      - "America/Denver"
      - "America/Detroit"
      - "America/Dominica"
      - "America/Edmonton"
      - "America/Eirunepe"
      - "America/El_Salvador"
      - "America/Fortaleza"
      - "America/Glace_Bay"
      - "America/Godthab"
      - "America/Goose_Bay"
      - "America/Grand_Turk"
      - "America/Grenada"
      - "America/Guadeloupe"
      - "America/Guatemala"
      - "America/Guayaquil"
      - "America/Guyana"
      - "America/Halifax"
      - "America/Havana"
      - "America/Hermosillo"
      - "America/Indiana/Indianapolis"
      - "America/Indiana/Knox"
      - "America/Indiana/Marengo"
      - "America/Indiana/Petersburg"
      - "America/Indiana/Tell_City"
      - "America/Indiana/Vevay"
      - "America/Indiana/Vincennes"
      - "America/Indiana/Winamac"
      - "America/Inuvik"
      - "America/Iqaluit"
      - "America/Jamaica"
      - "America/Juneau"
      - "America/Kentucky/Louisville"
      - "America/Kentucky/Monticello"
      - "America/Kralendijk"
      - "America/La_Paz"
      - "America/Lima"
      - "America/Los_Angeles"
      - "America/Lower_Princes"
      - "America/Maceio"
      - "America/Managua"
      - "America/Manaus"
      - "America/Marigot"
      - "America/Martinique"
      - "America/Matamoros"
      - "America/Mazatlan"
      - "America/Menominee"
      - "America/Merida"
      - "America/Metlakatla"
      - "America/Mexico_City"
      - "America/Miquelon"
      - "America/Moncton"
      - "America/Monterrey"
      - "America/Montevideo"
      - "America/Montreal"
      - "America/Montserrat"
      - "America/Nassau"
      - "America/New_York"
      - "America/Nipigon"
      - "America/Nome"
      - "America/Noronha"
      - "America/North_Dakota/Beulah"
      - "America/North_Dakota/Center"
      - "America/North_Dakota/New_Salem"
      - "America/Ojinaga"
      - "America/Panama"
      - "America/Pangnirtung"
      - "America/Paramaribo"
      - "America/Phoenix"
      - "America/Port-au-Prince"
      - "America/Port_of_Spain"
      - "America/Porto_Velho"
      - "America/Puerto_Rico"
      - "America/Rainy_River"
      - "America/Rankin_Inlet"
      - "America/Recife"
      - "America/Regina"
      - "America/Resolute"
      - "America/Rio_Branco"
      - "America/Santa_Isabel"
      - "America/Santarem"
      - "America/Santiago"
      - "America/Santo_Domingo"
      - "America/Sao_Paulo"
      - "America/Scoresbysund"
      - "America/Shiprock"
      - "America/Sitka"
      - "America/St_Barthelemy"
      - "America/St_Johns"
      - "America/St_Kitts"
      - "America/St_Lucia"
      - "America/St_Thomas"
      - "America/St_Vincent"
      - "America/Swift_Current"
      - "America/Tegucigalpa"
      - "America/Thule"
      - "America/Thunder_Bay"
      - "America/Tijuana"
      - "America/Toronto"
      - "America/Tortola"
      - "America/Vancouver"
      - "America/Whitehorse"
      - "America/Winnipeg"
      - "America/Yakutat"
      - "America/Yellowknife"
      - "Antarctica/Casey"
      - "Antarctica/Davis"
      - "Antarctica/DumontDUrville"
      - "Antarctica/Macquarie"
      - "Antarctica/Mawson"
      - "Antarctica/McMurdo"
      - "Antarctica/Palmer"
      - "Antarctica/Rothera"
      - "Antarctica/South_Pole"
      - "Antarctica/Syowa"
      - "Antarctica/Vostok"
      - "Arctic/Longyearbyen"
      - "Asia/Aden"
      - "Asia/Almaty"
      - "Asia/Amman"
      - "Asia/Anadyr"
      - "Asia/Aqtau"
      - "Asia/Aqtobe"
      - "Asia/Ashgabat"
      - "Asia/Baghdad"
      - "Asia/Bahrain"
      - "Asia/Baku"
      - "Asia/Bangkok"
      - "Asia/Beirut"
      - "Asia/Bishkek"
      - "Asia/Brunei"
      - "Asia/Choibalsan"
      - "Asia/Chongqing"
      - "Asia/Colombo"
      - "Asia/Damascus"
      - "Asia/Dhaka"
      - "Asia/Dili"
      - "Asia/Dubai"
      - "Asia/Dushanbe"
      - "Asia/Gaza"
      - "Asia/Harbin"
      - "Asia/Hebron"
      - "Asia/Ho_Chi_Minh"
      - "Asia/Hong_Kong"
      - "Asia/Hovd"
      - "Asia/Irkutsk"
      - "Asia/Jakarta"
      - "Asia/Jayapura"
      - "Asia/Jerusalem"
      - "Asia/Kabul"
      - "Asia/Kamchatka"
      - "Asia/Karachi"
      - "Asia/Kashgar"
      - "Asia/Kathmandu"
      - "Asia/Kolkata"
      - "Asia/Krasnoyarsk"
      - "Asia/Kuala_Lumpur"
      - "Asia/Kuching"
      - "Asia/Kuwait"
      - "Asia/Macau"
      - "Asia/Magadan"
      - "Asia/Makassar"
      - "Asia/Manila"
      - "Asia/Muscat"
      - "Asia/Nicosia"
      - "Asia/Novokuznetsk"
      - "Asia/Novosibirsk"
      - "Asia/Omsk"
      - "Asia/Oral"
      - "Asia/Phnom_Penh"
      - "Asia/Pontianak"
      - "Asia/Pyongyang"
      - "Asia/Qatar"
      - "Asia/Qyzylorda"
      - "Asia/Rangoon"
      - "Asia/Riyadh"
      - "Asia/Sakhalin"
      - "Asia/Samarkand"
      - "Asia/Seoul"
      - "Asia/Shanghai"
      - "Asia/Singapore"
      - "Asia/Taipei"
      - "Asia/Tashkent"
      - "Asia/Tbilisi"
      - "Asia/Tehran"
      - "Asia/Thimphu"
      - "Asia/Tokyo"
      - "Asia/Ulaanbaatar"
      - "Asia/Urumqi"
      - "Asia/Vientiane"
      - "Asia/Vladivostok"
      - "Asia/Yakutsk"
      - "Asia/Yekaterinburg"
      - "Asia/Yerevan"
      - "Atlantic/Azores"
      - "Atlantic/Bermuda"
      - "Atlantic/Canary"
      - "Atlantic/Cape_Verde"
      - "Atlantic/Faroe"
      - "Atlantic/Madeira"
      - "Atlantic/Reykjavik"
      - "Atlantic/South_Georgia"
      - "Atlantic/St_Helena"
      - "Atlantic/Stanley"
      - "Australia/Adelaide"
      - "Australia/Brisbane"
      - "Australia/Broken_Hill"
      - "Australia/Currie"
      - "Australia/Darwin"
      - "Australia/Eucla"
      - "Australia/Hobart"
      - "Australia/Lindeman"
      - "Australia/Lord_Howe"
      - "Australia/Melbourne"
      - "Australia/Perth"
      - "Australia/Sydney"
      - "Canada/Atlantic"
      - "Canada/Central"
      - "Canada/Eastern"
      - "Canada/Mountain"
      - "Canada/Newfoundland"
      - "Canada/Pacific"
      - "Europe/Amsterdam"
      - "Europe/Andorra"
      - "Europe/Athens"
      - "Europe/Belgrade"
      - "Europe/Berlin"
      - "Europe/Bratislava"
      - "Europe/Brussels"
      - "Europe/Bucharest"
      - "Europe/Budapest"
      - "Europe/Chisinau"
      - "Europe/Copenhagen"
      - "Europe/Dublin"
      - "Europe/Gibraltar"
      - "Europe/Guernsey"
      - "Europe/Helsinki"
      - "Europe/Isle_of_Man"
      - "Europe/Istanbul"
      - "Europe/Jersey"
      - "Europe/Kaliningrad"
      - "Europe/Kiev"
      - "Europe/Lisbon"
      - "Europe/Ljubljana"
      - "Europe/London"
      - "Europe/Luxembourg"
      - "Europe/Madrid"
      - "Europe/Malta"
      - "Europe/Mariehamn"
      - "Europe/Minsk"
      - "Europe/Monaco"
      - "Europe/Moscow"
      - "Europe/Oslo"
      - "Europe/Paris"
      - "Europe/Podgorica"
      - "Europe/Prague"
      - "Europe/Riga"
      - "Europe/Rome"
      - "Europe/Samara"
      - "Europe/San_Marino"
      - "Europe/Sarajevo"
      - "Europe/Simferopol"
      - "Europe/Skopje"
      - "Europe/Sofia"
      - "Europe/Stockholm"
      - "Europe/Tallinn"
      - "Europe/Tirane"
      - "Europe/Uzhgorod"
      - "Europe/Vaduz"
      - "Europe/Vatican"
      - "Europe/Vienna"
      - "Europe/Vilnius"
      - "Europe/Volgograd"
      - "Europe/Warsaw"
      - "Europe/Zagreb"
      - "Europe/Zaporozhye"
      - "Europe/Zurich"
      - "GMT"
      - "Indian/Antananarivo"
      - "Indian/Chagos"
      - "Indian/Christmas"
      - "Indian/Cocos"
      - "Indian/Comoro"
      - "Indian/Kerguelen"
      - "Indian/Mahe"
      - "Indian/Maldives"
      - "Indian/Mauritius"
      - "Indian/Mayotte"
      - "Indian/Reunion"
      - "Pacific/Apia"
      - "Pacific/Auckland"
      - "Pacific/Chatham"
      - "Pacific/Chuuk"
      - "Pacific/Easter"
      - "Pacific/Efate"
      - "Pacific/Enderbury"
      - "Pacific/Fakaofo"
      - "Pacific/Fiji"
      - "Pacific/Funafuti"
      - "Pacific/Galapagos"
      - "Pacific/Gambier"
      - "Pacific/Guadalcanal"
      - "Pacific/Guam"
      - "Pacific/Honolulu"
      - "Pacific/Johnston"
      - "Pacific/Kiritimati"
      - "Pacific/Kosrae"
      - "Pacific/Kwajalein"
      - "Pacific/Majuro"
      - "Pacific/Marquesas"
      - "Pacific/Midway"
      - "Pacific/Nauru"
      - "Pacific/Niue"
      - "Pacific/Norfolk"
      - "Pacific/Noumea"
      - "Pacific/Pago_Pago"
      - "Pacific/Palau"
      - "Pacific/Pitcairn"
      - "Pacific/Pohnpei"
      - "Pacific/Port_Moresby"
      - "Pacific/Rarotonga"
      - "Pacific/Saipan"
      - "Pacific/Tahiti"
      - "Pacific/Tarawa"
      - "Pacific/Tongatapu"
      - "Pacific/Wake"
      - "Pacific/Wallis"
      - "US/Alaska"
      - "US/Arizona"
      - "US/Central"
      - "US/Eastern"
      - "US/Hawaii"
      - "US/Mountain"
      - "US/Pacific"
      - "UTC"
      default: "UTC"
    InvitedListResponse:
      allOf:
      - $ref: "#/components/schemas/ListResponseAbstract"
      - type: "object"
    DocumentResponseDetail:
      allOf:
      - $ref: "#/components/schemas/DocumentResponse"
      - type: "object"
    CallbackCreatePost:
      required:
      - "notify_when"
      - "url"
      type: "object"
      properties:
        url:
          type: "string"
          description: "the url where you wish to get notified"
        notify_when:
          pattern: "^(all|signed)$"
          type: "string"
          description: "the type of callback to receive, value must be 'all' or 'signed'"
    AttachmentListResponse:
      allOf:
      - $ref: "#/components/schemas/ListResponseAbstract"
      - type: "object"
    StatusResponse:
      type: "object"
      properties:
        archived:
          type: "boolean"
        resource_uri:
          type: "string"
        status:
          type: "integer"
        download_final:
          type: "boolean"
    MemberListResponse:
      allOf:
      - $ref: "#/components/schemas/ListResponseAbstract"
      - type: "object"
    PDFPost:
      required:
      - "group"
      - "pdf_file"
      type: "object"
      properties:
        group:
          type: "string"
        pdf_file:
          type: "string"
          description: "base64 encoded PDF file data"
          format: "byte"
        title:
          type: "string"
        process_tags:
          type: "boolean"
        user:
          type: "string"
          description: "assign to group member if not api user"
    SignerStatusEnum:
      type: "integer"
      description: "Signer status options:\n * 4 - unsent\n * 5 - scheduled to be\
        \ sent\n * 10 - sent\n * 15 - email opened\n * 20 - visited\n * 30 - fields\
        \ complete \n * 35 - fields complete ex signature\n * 39 - waiting for witness\
        \ to complete\n * 40 - signed \n * 50 - downloaded \n * 60 - rejected\n"
      enum:
      - 5
      - 10
      - 20
      - 30
      - 40
      - 50
      - 60
    DocumentStatusEnum:
      type: "integer"
      description: "Document status options:\n  * 10 - Initial state, check signer\
        \ status for sent/unsent \n  * 20 - Fields completed \n  * 30 - Signed \n\
        \  * 40 - Removed (before signing) \n  * 50 - Rejected\n"
      enum:
      - 10
      - 20
      - 30
      - 40
      - 50
    MODEL9e1302:
      type: "object"
      properties:
        first_name:
          maxLength: 30
          type: "string"
        last_name:
          maxLength: 30
          type: "string"
    MODELfa2e34:
      required:
      - "email"
      type: "object"
      properties:
        email:
          type: "string"
          description: "Email of signer to revert to."
        notify:
          type: "boolean"
          description: "Email notify current signer access is being withdrawn"
    PDFFieldValidationEnum:
      type: "integer"
      description: "fields types and validations:\n  * 1 - Email \n  * 2 - yyyy/mm/dd\
        \ \n  * 3 - yy/mm/dd \n  * 4 - dd/mm/yyyy \n  * 5 - dd/mm/yy \n  * 6 - mm/dd/yy\
        \ \n  * 7 - mm/dd/yy \n  * 8 - yyyy.mm.dd \n  * 9 - yy.mm.dd \n  * 10 - dd.mm.yyyy\
        \ \n  * 11 - dd.mm.yy \n  * 12 - mm.dd.yyyy \n  * 13 - mm.dd.yy \n  * 14 -\
        \ yyyy-mm-dd \n  * 15 - yy-mm-dd \n  * 16 - dd-mm-yyyy \n  * 17 - dd-mm-yy\
        \ \n  * 18 - mm-dd-yyyy \n  * 19 - mm-dd-yy \n  * 20 - Dropdown list,  use\
        \ options attribute for items\n  * 24 - Checkbox tick/cross \n  * 25 - Checkbox\
        \ tick/blank \n  * 26 - Checkbox cross/blank \n  * 30 - yyyy/mm/dd (automatic)\
        \ \n  * 31 - yy/mm/dd (automatic) \n  * 32 - dd/yy/yyyy (automatic) \n  *\
        \ 33 - dd/mm/yy (automatic) \n  * 34 - mm/dd/yyyy (automatic) \n  * 35 - mm/dd/yy\
        \ (automatic) \n  * 36 - yyyy.mm.dd (automatic) \n  * 37 - yy.mm.dd (automatic)\
        \ \n  * 38 - dd.mm.yyyy (automatic) \n  * 39 - dd.mm.yy (automatic) \n  *\
        \ 40 - mm.dd.yyyy (automatic) \n  * 41 - mm.dd.yy (automatic) \n  * 42 - yyyy-mm-dd\
        \ (automatic) \n  * 43 - yy-mm-dd (automatic) \n  * 44 - dd-mm-yyyy (automatic)\
        \ \n  * 45 - dd-mm-yy (automatic) \n  * 46 - mm-dd-yyyy (automatic) \n  *\
        \ 47 - mm-dd-yy (automatic) \n  * 48 - d mmmmm yyyy (automatic) \n  * 50 -\
        \ Whole number \n  * 51 - Number \n  * 52 - Currency (2 decimals) \n  * 53\
        \ - 1 number \n  * 54 - 2 numbers \n  * 55 - 3 numbers \n  * 56 - 4 numbers\
        \ \n  * 57 - 5 numbers \n  * 58 - 6 numbers \n  * 59 - 7 numbers \n  * 60\
        \ - 8 numbers \n  * 61 - 9 numbers \n  * 62 - 10 numbers \n  * 63 - 11 numbers\
        \ \n  * 64 - 12 numbers \n  * 65 - 1 characters (any text) \n  * 66 - 2 characters\
        \ (any text)\n  * 67 - 3 characters (any text) \n  * 68 - 4 characters (any\
        \ text) \n  * 69 - 5 characters (any text) \n  * 70 - 6 characters (any text)\
        \ \n  * 71 - 7 characters (any text) \n  * 72 - 8 characters (any text) \n\
        \  * 73 - secret code, add code in options \n  * 74 - file attach, append\
        \ to email to signer \n  * 75 - file attach, append to final PDF\n"
      enum:
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - 10
      - 11
      - 12
      - 13
      - 14
      - 15
      - 16
      - 17
      - 18
      - 19
      - 20
      - 21
      - 24
      - 25
      - 26
      - 30
      - 31
      - 32
      - 33
      - 34
      - 35
      - 36
      - 37
      - 38
      - 39
      - 40
      - 41
      - 42
      - 43
      - 44
      - 45
      - 46
      - 47
      - 48
      - 50
      - 51
      - 52
      - 53
      - 54
      - 55
      - 56
      - 57
      - 58
      - 59
      - 60
      - 61
      - 62
      - 63
      - 64
      - 65
      - 66
      - 67
      - 68
      - 69
      - 70
      - 71
      - 72
      - 73
      - 74
      - 75
    PDFResponse:
      type: "object"
      properties:
        created:
          type: "string"
          format: "date-time"
        group:
          type: "string"
        modified:
          type: "string"
          format: "date-time"
        page_count:
          type: "integer"
        resource_uri:
          type: "string"
        title:
          type: "string"
        user:
          type: "string"
          description: "resource_uri for user"
        uuid:
          type: "string"
          description: "id for pdf object"
        valid:
          type: "boolean"
          description: "Is able to be sent"
    StatusListResponse:
      allOf:
      - $ref: "#/components/schemas/ListResponseAbstract"
      - type: "object"
    ListResponseAbstract:
      type: "object"
      properties:
        meta:
          type: "object"
          properties:
            limit:
              type: "integer"
              format: "int36"
            next:
              type: "string"
            offset:
              type: "integer"
              format: "int36"
            previous:
              type: "string"
            total_count:
              type: "integer"
              description: "total number of objects"
              format: "int36"
    GroupListResponse:
      allOf:
      - $ref: "#/components/schemas/ListResponseAbstract"
      - type: "object"
    AttachmentPost:
      required:
      - "filename"
      - "group"
      - "pdf_file"
      type: "object"
      properties:
        group:
          type: "string"
        pdf_file:
          type: "string"
          description: "base64 encoded PDF file data"
          format: "byte"
        filename:
          maxLength: 250
          type: "string"
          description: "must be simple chars/numbers ending .pdf"
        user:
          type: "string"
          description: "assign to group member if not api user"
        description:
          maxLength: 250
          type: "string"
  securitySchemes:
    api_key:
      type: "apiKey"
      name: "x-api-key"
      in: "header"
